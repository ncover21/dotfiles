#!/bin/bash

copy() {
    pbcopy < $1
}

cl() { cd "$@" && ls -la; }


uzrm(){
    unzip "$@" && rm "$@";
}

rmd () {
  pandoc $1 | lynx -stdin
}

rpdf(){
    pandoc $1 --pdf-engine=xelatex -o $2
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

#act_env() {
#    if [ -f env/bin/activate ]; then . env/bin/activate;
#    elif [ -f ../env/bin/activate ]; then . ../env/bin/activate;
#    elif [ -f ../../env/bin/activate ]; then . ../../env/bin/activate;
#    elif [ -f ../../../env/bin/activate ]; then . ../../../env/bin/activate;
#    fi
#}

git_full(){
    if [ $# -eq 0 ]; then
        echo "Specify Git message";
        exit 1;
    else
        git add .;
        git commit -m "$1";
        echo "Push Commit (y/n)";
        read REPLY;
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git push;
        else
            echo "Cancelling Push..."
        fi
    fi
}

addlist(){
    if [ $# -eq 0 ]; then
        echo "Specify List Message";
        exit 1;
    else
        echo "[ ] $1\n" >> ~/list.txt;
    fi

}

#cp_p()
#{
   #strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
      #| awk '{
        #count += $NF
            #if (count % 10 == 0) {
               #percent = count / total_size * 100
               #printf "%3d%% [", percent
               #for (i=0;i<=percent;i++)
                  #printf "="
               #printf ">"
               #for (i=percent;i<100;i++)
                  #printf " "
               #printf "]\r"
            #}
         #}
         #END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
#}

